import pandas as pd
from datetime import datetime
from typing import List, Dict
import streamlit as st
import plotly.express as px
from utils.dto import FilterConfig

from utils.filter import get_monthly_averages
from utils.mapper import map_month_to_monthname_german

@st.cache_data
def get_monthly_averages_plot_data(config: FilterConfig) -> pd.DataFrame:
    """
    Generates a plot of monthly averages for a given time range, selected stations, and sensor.
    The plot is generated by comparing the monthly averages of the target year with the monthly averages of the previous year.
    For example: selected range: 01.01.2019-01.01.2022 -> target year = 2022;
    1) Calculate monthly averages for 01.01.2018-31.12.2021
    2) Calculate monthly averages for 01.01.2022-31.12.2022 (target year)
    3) Plot the two dataframes against each other.
    
    Parameters:
        start_date (datetime): The start date of the time range.
        end_date (datetime): The end date of the time range.
        selected_stations (List[str]): A list of selected station names.
        selected_sensor (str): The name of the selected sensor.
    """
    
    target_year = config.end_date.year
    
    start_date_begin = datetime(config.start_date.year, 1, 1)
    end_date_begin = datetime(target_year - 1, 12, 31)
    agg_data_full = get_monthly_averages(start_date_begin, end_date_begin, config.selected_stations, config.selected_sensor)
    agg_data_full["name"] = agg_data_full["Station"].apply(lambda x: f"Vorjahre ({x}) ({start_date_begin.year}-{end_date_begin.year})")
    
    
    start_date_other = datetime(target_year, 1, 1)
    end_date_other = datetime(target_year, 12, 31)
    agg_data_target_year = get_monthly_averages(start_date_other, end_date_other, config.selected_stations, config.selected_sensor)
    agg_data_target_year["name"] = agg_data_full["Station"].apply(lambda x: f"Aktuelles Jahr ({x}) ({start_date_other.year}-{end_date_other.year})")
    
    df = pd.concat([agg_data_full, agg_data_target_year])
    
    df["month"] = df["month"].apply(map_month_to_monthname_german)
    
    return df


def get_monthly_averages_plot(filter_config: FilterConfig):
    """
    Generates a plot showing the monthly averages for a selected sensor over a specified time period.

    Parameters:
        start_date (datetime): The start date of the time period.
        end_date (datetime): The end date of the time period.
        selected_stations (List[str]): A list of selected stations.
        selected_sensor (str): The selected sensor.
    """
    
    df = get_monthly_averages_plot_data(filter_config)
    
    fig = px.line(df,
                x="month",
                y=filter_config.selected_sensor, 
                color="name",
                )
    fig.add_hline(y=filter_config.global_average, line_dash="dash", line_width=3, line_color="orange", showlegend=True, name="⌀ Jahr alle Stationen")
    fig.update_layout(
        title=f"Monatsdurchschnitt für {filter_config.human_readable_sensor} im Vergleich zu den Vorjahren",
        xaxis_title="Monat",
        yaxis_title=f"{filter_config.human_readable_sensor}",
        legend_title="Stationen",
    )
    
    return st.plotly_chart(fig, use_container_width=True)
    